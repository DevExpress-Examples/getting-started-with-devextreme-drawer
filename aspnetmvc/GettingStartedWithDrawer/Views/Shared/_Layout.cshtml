<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>GettingStartedWithDrawer</title>
    <link href="~/favicon.ico" rel="shortcut icon" type="image/x-icon" />

    @* Uncomment to use the HtmlEditor control *@
    @* <script src="https://unpkg.com/devextreme-quill/dist/dx-quill.min.js"></script> *@

    @Styles.Render("~/Content/bundle")
    @Styles.Render("~/Content/DevExtremeBundle")
    @Scripts.Render("~/Scripts/bundle")
    @Scripts.Render("~/Scripts/DevExtremeBundle")
</head>

<body>

    @*<nav class="navbar navbar-dark bg-dark fixed-top navbar-expand-md">
            <a class="navbar-brand" href="/">GettingStartedWithDrawer</a>

            <button type="button" class="navbar-toggler" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                <span class="navbar-toggler-icon"></span>
            </button>

            <div id="navbar" class="collapse navbar-collapse">
                <ul class="navbar-nav mr-auto">
                    <li class="active nav-item"><a href="#" class="nav-link">Home</a></li>
                    <li class="nav-item"><a href="#about" class="nav-link">About</a></li>
                    <li class="nav-item"><a href="#contact" class="nav-link">Contact</a></li>
                </ul>
            </div>
        </nav>

        <main role="main" class="container">
            @RenderBody()
        </main>*@

    @(Html.DevExtreme().Toolbar()
        .ID("layout-toolbar")
        .Items(items =>
        {
            items.Add().Widget(w => w.Button()
                .Icon("menu")
                .OnClick("button_clickHandler")
            ).Location(ToolbarItemLocation.Before);
        })
    )

    @(Html.DevExtreme().Drawer()
        .ID("layout-drawer")
        .MinSize(37)
        .Height(250)
        .Opened(new JS("JSON.parse(sessionStorage.getItem('isDrawerOpen'))"))
        .RevealMode(DrawerRevealMode.Expand)
        .OpenedStateMode(DrawerOpenedStateMode.Overlap)
        .Template(@<text>
            @(Html.DevExtreme().List()
                .Width(200)
                .OnInitialized("list_onInitialized")
                .Items(items => {
                    items.Add().Text("Inbox").Icon("message").Option("path", @Url.Action("Index"));
                    items.Add().Text("Sent Mail").Icon("check").Option("path", @Url.Action("Sent"));
                    items.Add().Text("Deleted").Icon("trash").Option("path", @Url.Action("Deleted"));
                    items.Add().Text("Spam").Icon("mention").Option("path", @Url.Action("Spam"));
                })
                .KeyExpr("path")
                .SelectionMode(ListSelectionMode.Single)
                .OnSelectionChanged("list_onSelectionChanged")
            )
        </text>)
        .Content(@<text>@RenderBody()</text>)
    )

    <script type="text/javascript">
        function button_clickHandler() {
            const drawer = $("#layout-drawer").dxDrawer("instance");
            drawer.toggle();
            sessionStorage.setItem("isDrawerOpen", JSON.stringify(drawer.option("opened")));
        }

        function list_onSelectionChanged(e) {
            const drawer = $("#layout-drawer").dxDrawer("instance");
            drawer.hide();
            sessionStorage.setItem("isDrawerOpen", JSON.stringify(drawer.option("opened")));
            document.location.pathname = e.addedItems[0].path;
        }

        function list_onInitialized(e) {
            const t = "@Url.Action()";
            e.component.option("selectedItemKeys", [ "@Url.Action()" ])
        }
    </script>
</body>

</html>
